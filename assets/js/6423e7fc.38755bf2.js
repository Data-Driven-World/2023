"use strict";(self.webpackChunksite_docusaurus_template=self.webpackChunksite_docusaurus_template||[]).push([[2074],{5217:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));a(1694),a(3707),a(6533),a(505);const i={sidebar_position:0},l="Learning Objectives",o={unversionedId:"intro",id:"intro",title:"Learning Objectives",description:"Week 1: Sorting Algorithms",source:"@site/learning-objectives/intro.md",sourceDirName:".",slug:"/intro",permalink:"/2023/learning-objectives/intro",draft:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"tutorialSidebar",next:{title:"Week 1: Python",permalink:"/2023/learning-objectives/python"}},s={},p=[{value:"Week 1: Sorting Algorithms",id:"week-1-sorting-algorithms",level:2},{value:"Concept Map",id:"concept-map",level:4},{value:"Week 2: Analysing Programs",id:"week-2-analysing-programs",level:2},{value:"Concept Map",id:"concept-map-1",level:4},{value:"Week 3: Divide and Conquer",id:"week-3-divide-and-conquer",level:2},{value:"Concept Map",id:"concept-map-2",level:4},{value:"Week 4: Object-Oriented Paradigm",id:"week-4-object-oriented-paradigm",level:2},{value:"Concept Map",id:"concept-map-3",level:4},{value:"Week 5: Inheritance and Intro to Graph",id:"week-5-inheritance-and-intro-to-graph",level:2},{value:"Concept Map",id:"concept-map-4",level:4},{value:"Week 6: Graph Traversal",id:"week-6-graph-traversal",level:2},{value:"Concept Map",id:"concept-map-5",level:4},{value:"Week 8: Design of State Machines",id:"week-8-design-of-state-machines",level:2},{value:"Concept Map",id:"concept-map-6",level:4},{value:"Week 9: Visualizing and Processing Data",id:"week-9-visualizing-and-processing-data",level:2},{value:"Concept Map",id:"concept-map-7",level:4},{value:"Week 10: Modelling Continuous Data",id:"week-10-modelling-continuous-data",level:2},{value:"Concept Map",id:"concept-map-8",level:4},{value:"Week 11: Classifying Categorical Data",id:"week-11-classifying-categorical-data",level:2},{value:"Concept Map",id:"concept-map-9",level:4}],m={toc:p},k="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(k,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"learning-objectives"},"Learning Objectives"),(0,r.kt)("h2",{id:"week-1-sorting-algorithms"},"Week 1: Sorting Algorithms"),(0,r.kt)("h4",{id:"concept-map"},(0,r.kt)("a",{parentName:"h4",href:"/learning-objectives/python"},"Concept Map")),(0,r.kt)("p",null,"By the end of these lessons, students should be able to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Apply Python's ",(0,r.kt)("strong",{parentName:"li"},"procedural")," programming and ",(0,r.kt)("strong",{parentName:"li"},"basic")," data structures."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Define")," and ",(0,r.kt)("strong",{parentName:"li"},"call")," functions."),(0,r.kt)("li",{parentName:"ul"},"Describe ",(0,r.kt)("strong",{parentName:"li"},"bubble sort")," and ",(0,r.kt)("strong",{parentName:"li"},"insertion sort")," algorithms and ways to optimise it."),(0,r.kt)("li",{parentName:"ul"},"Implement bubble sort and insertion sort algorithms to ",(0,r.kt)("strong",{parentName:"li"},"sort")," a sequence of number."),(0,r.kt)("li",{parentName:"ul"},"Use ",(0,r.kt)("strong",{parentName:"li"},"print")," statements to debug code.")),(0,r.kt)("h2",{id:"week-2-analysing-programs"},"Week 2: Analysing Programs"),(0,r.kt)("h4",{id:"concept-map-1"},(0,r.kt)("a",{parentName:"h4",href:"/learning-objectives/analysing-programs"},"Concept Map")),(0,r.kt)("p",null,"By the end of these lessons, students should be able to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Implement a ",(0,r.kt)("strong",{parentName:"li"},"binary heap")," using Python's built-in list."),(0,r.kt)("li",{parentName:"ul"},"Describe ",(0,r.kt)("strong",{parentName:"li"},"heap property"),"."),(0,r.kt)("li",{parentName:"ul"},"Write functions to do ",(0,r.kt)("strong",{parentName:"li"},"binary heap")," data structure operations."),(0,r.kt)("li",{parentName:"ul"},"Implement algorithm to restore the ",(0,r.kt)("strong",{parentName:"li"},"heap property"),"."),(0,r.kt)("li",{parentName:"ul"},"Describe and implement the algorithm to ",(0,r.kt)("strong",{parentName:"li"},"build a heap"),"."),(0,r.kt)("li",{parentName:"ul"},"Implement ",(0,r.kt)("strong",{parentName:"li"},"heapsort")," using iteration."),(0,r.kt)("li",{parentName:"ul"},"Define ",(0,r.kt)("strong",{parentName:"li"},"Big-O")," notation and other asymptotic notations."),(0,r.kt)("li",{parentName:"ul"},"Derive ",(0,r.kt)("strong",{parentName:"li"},"complexity")," of a code using Python computation model."),(0,r.kt)("li",{parentName:"ul"},"Create ",(0,r.kt)("strong",{parentName:"li"},"plots")," from array data for ",(0,r.kt)("strong",{parentName:"li"},"visualising")," computational time."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Measure")," computation time for bubble sort, insertion sort and heapsort.")),(0,r.kt)("h2",{id:"week-3-divide-and-conquer"},"Week 3: Divide and Conquer"),(0,r.kt)("h4",{id:"concept-map-2"},(0,r.kt)("a",{parentName:"h4",href:"/learning-objectives/divide-conquer"},"Concept Map")),(0,r.kt)("p",null,"By the end of these lessons, students should be able to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Solve problems using ",(0,r.kt)("strong",{parentName:"li"},"recursion"),"."),(0,r.kt)("li",{parentName:"ul"},"Identify problems that has recursive solutions."),(0,r.kt)("li",{parentName:"ul"},"Identify ",(0,r.kt)("strong",{parentName:"li"},"base case")," and ",(0,r.kt)("strong",{parentName:"li"},"recursive case")," in a recursive problem and its solution."),(0,r.kt)("li",{parentName:"ul"},"Explain and implement the recursive solution of ",(0,r.kt)("strong",{parentName:"li"},"Tower of Hanoi"),"."),(0,r.kt)("li",{parentName:"ul"},"Explain and implement ",(0,r.kt)("strong",{parentName:"li"},"merge sort")," algorithm."),(0,r.kt)("li",{parentName:"ul"},"Derive solution for ",(0,r.kt)("strong",{parentName:"li"},"recurrence")," of tower of hanoi and merge sort using ",(0,r.kt)("strong",{parentName:"li"},"recursion-tree")," method."),(0,r.kt)("li",{parentName:"ul"},"Measure ",(0,r.kt)("strong",{parentName:"li"},"computation time")," of merge sort and compare it with the other sort algorithms."),(0,r.kt)("li",{parentName:"ul"},"Use ",(0,r.kt)("strong",{parentName:"li"},"helper function")," for a recursive solution."),(0,r.kt)("li",{parentName:"ul"},"Compare recursive solution with that using iteration and discuss its advantages and disadvantages.")),(0,r.kt)("h2",{id:"week-4-object-oriented-paradigm"},"Week 4: Object-Oriented Paradigm"),(0,r.kt)("h4",{id:"concept-map-3"},(0,r.kt)("a",{parentName:"h4",href:"/learning-objectives/oop"},"Concept Map")),(0,r.kt)("p",null,"By the end of these lessons, students should be able to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Use object-oriented programming to ",(0,r.kt)("strong",{parentName:"li"},"abstract data"),"."),(0,r.kt)("li",{parentName:"ul"},"Create ",(0,r.kt)("inlineCode",{parentName:"li"},"class")," definitions with initialization and other methods."),(0,r.kt)("li",{parentName:"ul"},"Create ",(0,r.kt)("strong",{parentName:"li"},"stored")," property and ",(0,r.kt)("strong",{parentName:"li"},"computed")," property."),(0,r.kt)("li",{parentName:"ul"},"Draw ",(0,r.kt)("strong",{parentName:"li"},"UML class diagram")," of a class with attributes and methods."),(0,r.kt)("li",{parentName:"ul"},"Explain ",(0,r.kt)("inlineCode",{parentName:"li"},"has-a")," relationship."),(0,r.kt)("li",{parentName:"ul"},"Use object-oriented programming to implement ",(0,r.kt)("strong",{parentName:"li"},"computation"),"."),(0,r.kt)("li",{parentName:"ul"},"Draw UML class diagram for ",(0,r.kt)("inlineCode",{parentName:"li"},"has-a")," relationship."),(0,r.kt)("li",{parentName:"ul"},"Implement abstract data type for ",(0,r.kt)("strong",{parentName:"li"},"Stack and Queue")," using Object Oriented paradigm."),(0,r.kt)("li",{parentName:"ul"},"Implement Queue using ",(0,r.kt)("strong",{parentName:"li"},"double Stack")," and discuss implementation impact on ",(0,r.kt)("strong",{parentName:"li"},"computation time"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Apply")," Stack and Queue for some applications.")),(0,r.kt)("h2",{id:"week-5-inheritance-and-intro-to-graph"},"Week 5: Inheritance and Intro to Graph"),(0,r.kt)("h4",{id:"concept-map-4"},(0,r.kt)("a",{parentName:"h4",href:"/learning-objectives/oop-inheritance"},"Concept Map")),(0,r.kt)("p",null,"By the end of these lessons, students should be able to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Apply")," Stack and Queue for some applications."),(0,r.kt)("li",{parentName:"ul"},"Use ",(0,r.kt)("strong",{parentName:"li"},"object-oriented programming")," to implement both data and ",(0,r.kt)("strong",{parentName:"li"},"computation"),"."),(0,r.kt)("li",{parentName:"ul"},"Explain ",(0,r.kt)("inlineCode",{parentName:"li"},"is-a")," relationship for inheritance."),(0,r.kt)("li",{parentName:"ul"},"Draw ",(0,r.kt)("strong",{parentName:"li"},"UML class diagram")," for ",(0,r.kt)("inlineCode",{parentName:"li"},"is-a")," relationship."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Inherit")," a class to create a child class from a base class."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Override")," operators to extend parent's methods."),(0,r.kt)("li",{parentName:"ul"},"Implement ",(0,r.kt)("strong",{parentName:"li"},"Deque")," data structure as a subclass of ",(0,r.kt)("strong",{parentName:"li"},"Queue"))),(0,r.kt)("h2",{id:"week-6-graph-traversal"},"Week 6: Graph Traversal"),(0,r.kt)("h4",{id:"concept-map-5"},(0,r.kt)("a",{parentName:"h4",href:"/learning-objectives/graph-traversal"},"Concept Map")),(0,r.kt)("p",null,"By the end of these lessons, students should be able to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Define ",(0,r.kt)("strong",{parentName:"li"},"graph"),", ",(0,r.kt)("strong",{parentName:"li"},"vertices"),", ",(0,r.kt)("strong",{parentName:"li"},"edges")," and ",(0,r.kt)("strong",{parentName:"li"},"weights"),"."),(0,r.kt)("li",{parentName:"ul"},"Use Dictionary and OOP to ",(0,r.kt)("strong",{parentName:"li"},"represent graph"),"."),(0,r.kt)("li",{parentName:"ul"},"Represent graphs using ",(0,r.kt)("strong",{parentName:"li"},"adjacency-list")," representation or ",(0,r.kt)("strong",{parentName:"li"},"adjacency-matrix")," representation."),(0,r.kt)("li",{parentName:"ul"},"Differentiate ",(0,r.kt)("strong",{parentName:"li"},"directed")," and ",(0,r.kt)("strong",{parentName:"li"},"undirected")," graphs."),(0,r.kt)("li",{parentName:"ul"},"Define ",(0,r.kt)("strong",{parentName:"li"},"paths"),"."),(0,r.kt)("li",{parentName:"ul"},"Create a ",(0,r.kt)("inlineCode",{parentName:"li"},"Vertex")," class and a ",(0,r.kt)("inlineCode",{parentName:"li"},"Graph")," class."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Extend")," class Vertex and Graph for graph ",(0,r.kt)("strong",{parentName:"li"},"traversal")," algorithm."),(0,r.kt)("li",{parentName:"ul"},"Explain and implement ",(0,r.kt)("strong",{parentName:"li"},"breadth")," first search ."),(0,r.kt)("li",{parentName:"ul"},"Explain and implement ",(0,r.kt)("strong",{parentName:"li"},"depth")," first search.")),(0,r.kt)("h2",{id:"week-8-design-of-state-machines"},"Week 8: Design of State Machines"),(0,r.kt)("h4",{id:"concept-map-6"},(0,r.kt)("a",{parentName:"h4",href:"/learning-objectives/sm"},"Concept Map")),(0,r.kt)("p",null,"By the end of these lessons, students should be able to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Define a ",(0,r.kt)("strong",{parentName:"li"},"state machine"),"."),(0,r.kt)("li",{parentName:"ul"},"Define ",(0,r.kt)("strong",{parentName:"li"},"output")," function and ",(0,r.kt)("strong",{parentName:"li"},"next state")," function."),(0,r.kt)("li",{parentName:"ul"},"Draw ",(0,r.kt)("strong",{parentName:"li"},"state transition diagram")," and ",(0,r.kt)("strong",{parentName:"li"},"time-step table"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Implement")," output function and next state function inside ",(0,r.kt)("inlineCode",{parentName:"li"},"get_next_values")," overridden method."),(0,r.kt)("li",{parentName:"ul"},"Apply breadth first search to perform ",(0,r.kt)("strong",{parentName:"li"},"state-space search"),".")),(0,r.kt)("h2",{id:"week-9-visualizing-and-processing-data"},"Week 9: Visualizing and Processing Data"),(0,r.kt)("h4",{id:"concept-map-7"},(0,r.kt)("a",{parentName:"h4",href:"/learning-objectives/vis-proc"},"Concept Map")),(0,r.kt)("p",null,"By the end of these lessons, students should be able to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Give example of ",(0,r.kt)("strong",{parentName:"li"},"linear regression and classification"),"."),(0,r.kt)("li",{parentName:"ul"},"Create a Pandas ",(0,r.kt)("strong",{parentName:"li"},"DataFrame")," and selecting data from DataFrame."),(0,r.kt)("li",{parentName:"ul"},"Creating new ",(0,r.kt)("strong",{parentName:"li"},"Numpy Arrays"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Selecting")," data from NumPy Array."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Convert")," Pandas DataFrame to NumPy Array."),(0,r.kt)("li",{parentName:"ul"},"Use mathematical, statistical and linear algebra functions on NumPy Array."),(0,r.kt)("li",{parentName:"ul"},"Using Pandas library to ",(0,r.kt)("strong",{parentName:"li"},"read")," ",(0,r.kt)("inlineCode",{parentName:"li"},"CSV")," file."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Split data")," randomly into training set and testing set."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Normalize")," data using z-normalization and min-max normalization."),(0,r.kt)("li",{parentName:"ul"},"Create ",(0,r.kt)("strong",{parentName:"li"},"scatter")," plot and ",(0,r.kt)("strong",{parentName:"li"},"statistical plots")," like box plot, histogram, and bar plot.")),(0,r.kt)("h2",{id:"week-10-modelling-continuous-data"},"Week 10: Modelling Continuous Data"),(0,r.kt)("h4",{id:"concept-map-8"},(0,r.kt)("a",{parentName:"h4",href:"/learning-objectives/modelling"},"Concept Map")),(0,r.kt)("p",null,"By the end of these lessons, students should be able to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Write ",(0,r.kt)("strong",{parentName:"li"},"cost function")," of ",(0,r.kt)("strong",{parentName:"li"},"linear regression"),"."),(0,r.kt)("li",{parentName:"ul"},"Implement ",(0,r.kt)("strong",{parentName:"li"},"Gradient Descent")," algorithm for optimisation."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Train")," linear regression model using gradient descent."),(0,r.kt)("li",{parentName:"ul"},"Transform data for ",(0,r.kt)("strong",{parentName:"li"},"polynomial")," model."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Evaluate")," linear regression model using ",(0,r.kt)("inlineCode",{parentName:"li"},"r^2")," and mean-squared-error."),(0,r.kt)("li",{parentName:"ul"},"Evaluate and choose ",(0,r.kt)("strong",{parentName:"li"},"learning rate"),"."),(0,r.kt)("li",{parentName:"ul"},"Plot cost function over iteration time."),(0,r.kt)("li",{parentName:"ul"},"Plot linear regression.")),(0,r.kt)("h2",{id:"week-11-classifying-categorical-data"},"Week 11: Classifying Categorical Data"),(0,r.kt)("h4",{id:"concept-map-9"},(0,r.kt)("a",{parentName:"h4",href:"/learning-objectives/classify"},"Concept Map")),(0,r.kt)("p",null,"By the end of these lessons, students should be able to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Write ",(0,r.kt)("strong",{parentName:"li"},"cost function")," of ",(0,r.kt)("strong",{parentName:"li"},"logistic")," regression.\no- Use logistic regression to calculate probabilities of ",(0,r.kt)("strong",{parentName:"li"},"binary classification"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Train")," logistic regression model."),(0,r.kt)("li",{parentName:"ul"},"Classify ",(0,r.kt)("strong",{parentName:"li"},"multi-class")," problems using ",(0,r.kt)("strong",{parentName:"li"},"one-vs-all")," technique."),(0,r.kt)("li",{parentName:"ul"},"Calculate ",(0,r.kt)("strong",{parentName:"li"},"confusion")," ",(0,r.kt)("strong",{parentName:"li"},"matrix"),", ",(0,r.kt)("strong",{parentName:"li"},"accuracy"),", ",(0,r.kt)("strong",{parentName:"li"},"precision"),", ",(0,r.kt)("strong",{parentName:"li"},"specificity")," and ",(0,r.kt)("strong",{parentName:"li"},"recall"),".")))}u.isMDXComponent=!0}}]);