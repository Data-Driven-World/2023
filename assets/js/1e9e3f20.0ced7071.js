"use strict";(self.webpackChunksite_docusaurus_template=self.webpackChunksite_docusaurus_template||[]).push([[3184],{2781:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>x,contentTitle:()=>o,default:()=>l,frontMatter:()=>r,metadata:()=>c,toc:()=>p});var a=t(7462),s=(t(7294),t(3905)),i=(t(1694),t(3707),t(6533),t(505));const r={sidebar_position:4},o="Week 4: OOP",c={unversionedId:"oop",id:"oop",title:"Week 4: OOP",description:"Concept Map",source:"@site/learning-objectives/04-oop.md",sourceDirName:".",slug:"/oop",permalink:"/2023/learning-objectives/oop",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Week 3: Divide and Conquer",permalink:"/2023/learning-objectives/divide-conquer"},next:{title:"Week 5: Searching Data",permalink:"/2023/learning-objectives/searching-data"}},x={},p=[{value:"Concept Map",id:"concept-map",level:3}],T={toc:p},d="wrapper";function l(e){let{components:n,...t}=e;return(0,s.kt)(d,(0,a.Z)({},T,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"week-4-oop"},"Week 4: OOP"),(0,s.kt)(i.Z,{mdxType:"ChatBaseBubble"}),(0,s.kt)("h3",{id:"concept-map"},"Concept Map"),(0,s.kt)("mermaid",{value:"flowchart TD\n    A((Week 4<br>Object Oriented<br>Programming)) --\x3e |uses| O((Object))\n    style A color:red\n    O --\x3e |defined in| C((Class))\n    O --\x3e |has| R((Relationship))\n    O --\x3e |creates| OI((Object Instance))\n    O --\x3e |has| M((Methods))\n    O --\x3e |has| ATTR((Attributes))\n    UML((UML)) --\x3e |represents| C\n    UML --\x3e |describes| R\n    R --\x3e |can be| HA((has-a))\n    R --\x3e |can be| IA((is-a))\n    OI --\x3e |reference| ALIAS((Aliasing))\n    HA --\x3e |called| COMP((Composition))\n    IA --\x3e |called| INH((Inheritance))\n    M --\x3e |can be| SM((Special Methods))\n    POP((POP)) --\x3e |is a| M\n    PUSH((PUSH)) --\x3e |is a| M\n    STACK((Stack)) --\x3e |implemented as| O\n    STACK --\x3e |has| PUSH\n    STACK --\x3e |has| POP\n    STACK --\x3e |has| I((items))\n    QUEUE((QUEUE)) --\x3e |has| I\n    DS((Data Structure)) --\x3e |learns| STACK\n    DS((Data Structure)) --\x3e |learns| QUEUE\n    style DS color:red\n    STACK --\x3e |is| LDT((Linear Data Structure))\n    QUEUE --\x3e |is| LDT\n    QUEUE --\x3e |has| EQ((Enqueue))\n    QUEUE --\x3e |has| DQ((Dequeue))\n    QUEUE --\x3e |implemented as| O\n    EQ --\x3e |is a| M\n    DQ --\x3e |is a| M\n    SETTER((Setter)) --\x3e |is a| M\n    SETTER --\x3e |modifies| ATTR\n    GETTER((Getter)) --\x3e |is a| M\n    GETTER --\x3e |access| ATTR\n    PROP((Property)) --\x3e |encapsulates| ATTR\n    PROP --\x3e |uses| GETTER\n    PROP --\x3e |uses| SETTER\n    PROP --\x3e |can be| COMP((computed))\n    PROP --\x3e |can be| STR((stored))\n    COMP --\x3e |has not| SETTER\n    COMP --\x3e |has| GETTER\n    STR --\x3e |has| GETTER\n    STR --\x3e |has| SETTER"}))}l.isMDXComponent=!0}}]);