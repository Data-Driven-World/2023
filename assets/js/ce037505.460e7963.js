"use strict";(self.webpackChunksite_docusaurus_template=self.webpackChunksite_docusaurus_template||[]).push([[813],{6661:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var r=a(7462),i=(a(7294),a(3905)),t=(a(1694),a(3707),a(6533),a(505));const o={sidebar_position:3,sidebar_class_name:"hidden"},s="Week 3: Divide and Conquer",c={unversionedId:"divide-conquer",id:"divide-conquer",title:"Week 3: Divide and Conquer",description:"Concept Map",source:"@site/learning-objectives/03-divide-conquer.md",sourceDirName:".",slug:"/divide-conquer",permalink:"/2023/learning-objectives/divide-conquer",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,sidebar_class_name:"hidden"},sidebar:"tutorialSidebar",previous:{title:"Week 2: Analysing Programs",permalink:"/2023/learning-objectives/analysing-programs"},next:{title:"Week 4: OOP",permalink:"/2023/learning-objectives/oop"}},d={},u=[{value:"Concept Map",id:"concept-map",level:3}],p={toc:u},l="wrapper";function m(e){let{components:n,...a}=e;return(0,i.kt)(l,(0,r.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"week-3-divide-and-conquer"},"Week 3: Divide and Conquer"),(0,i.kt)(t.Z,{mdxType:"ChatBaseBubble"}),(0,i.kt)("h3",{id:"concept-map"},"Concept Map"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://www.dropbox.com/scl/fi/b3khm2mmgpbs6uf04ua03/DDW-Concept-Map-Week-3.drawio.png?rlkey=bv1zxg85e94ccpqa925bjupyg&raw=1",alt:null})),(0,i.kt)("mermaid",{value:"flowchart TD\n    A((Week 3<br>Recursion and Mergesort)) --\x3e |learns| ALGO((Algorithm))\n    ALGO --\x3e |learns| C((Complexity))\n    ALGO --\x3e |learns| R((Recursion))\n    ALGO --\x3e |learns| S((Sorting))\n    C  --\x3e |computes| CT((Computational Time))\n    R --\x3e |as compared to| ITER((Iteration))\n    R --\x3e |may use| HF((Helper Function))\n    R --\x3e |has| CS((cases))\n    S --\x3e |learns| MS((Mergesort))\n    CT --\x3e |draw| RT((Recursive Tree))\n    CT --\x3e |can be| EXP((exponential))\n    EXP --\x3e |for| TOH\n    CT --\x3e |can be| LL((Log Linear))\n    MS --\x3e |uses| R\n    CS --\x3e |uses| IE((if-else))\n    CS --\x3e |has| BASE((base))\n    CS --\x3e |has| REC((recursive))\n    RT --\x3e |for| TOH((Tower of Hanoi))\n    RT --\x3e |for| MS\n    LL --\x3e |for| MS\n    TOH --\x3e |uses| R\n    CT --\x3e |for| R"}))}m.isMDXComponent=!0}}]);